<%@ jet
	imports="
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.process.IConnection
	org.talend.core.model.process.IConnectionCategory
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.EConnectionType
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
	java.util.List
	java.util.HashMap
	java.util.Map
	java.util.ArrayList
	"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String xero_CONSUMER_KEY = ElementParameterParser.getValue(node, "__Xero_CONSUMER_KEY__");
	String Xero_CONSUMER_PK_FILE = ElementParameterParser.getValue(node, "__Xero_CONSUMER_PK_FILE__");
	Boolean bprocessChild = false;
	String last_modified_date = ElementParameterParser.getValue(node, "__LAST_MODIFIED_DATE__");
	String page_filter = ElementParameterParser.getValue(node, "__PAGE_FILTER__");
	String xero_apiurl = ElementParameterParser.getValue(node, "__XeroAPIURL__");
	String post_method = ElementParameterParser.getValue(node, "__POST_METHOD__");
	String modulenameall = ElementParameterParser.getValue(node, "__MODULENAME__");
	String sort_by = ElementParameterParser.getValue(node, "__SORT_BY__");
	String sort_mode = ElementParameterParser.getValue(node, "__SORT_MODE__");
	String include_archive = ElementParameterParser.getValue(node, "__INCLUDE_ARCHIVED__");
	String modulename = ElementParameterParser.getValue(node, "__MODULENAME__").substring(0,ElementParameterParser.getValue(node, "__MODULENAME__").indexOf(":"));
	List<Map<String, String>> filter_input_list = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILTER_INPUT__");
	int size_filter_input_list = filter_input_list.size();
	/*
	Logic is that we use : separator in modulename to identify child nodes and parent nodes
	bprocesschild is used to identify whether we need to process lowest level child
	challenge is building the child level xml - as freshbooks expect a specific pattern.
	also response from freshbooks will contain number of pages the request returned 
	and if user has specified page filter we restrict pages to that page filter number
	and we continue to keep sending request to freshbooks unless we have received all 
	pages.
	*/
%>
	int nb_line_<%=cid %> = 0;
	String Xero_CONSUMER_PK_KEY<%=cid %> = "";
	
	String xero_CONSUMER_KEY_<%=cid %> = <%=xero_CONSUMER_KEY %>;
	String Xero_CONSUMER_PRIVATE_KEY_<%=cid %> = "";
	try{
		// Open the file that is the first 
		// command line parameter
		java.io.FileInputStream fstream_<%=cid %> = new java.io.FileInputStream(<%=Xero_CONSUMER_PK_FILE %>);
		// Get the object of DataInputStream
		java.io.DataInputStream in_<%=cid %> = new java.io.DataInputStream(fstream_<%=cid %>);
		java.io.BufferedReader br_<%=cid %> = new java.io.BufferedReader(new java.io.InputStreamReader(in_<%=cid %>));
		String strLine_<%=cid %>;
		//Read File Line By Line
		while ((strLine_<%=cid %> = br_<%=cid %>.readLine()) != null)   {
			// Print the content on the console
			Xero_CONSUMER_PRIVATE_KEY_<%=cid %> += strLine_<%=cid %>+"\n";
		}
		//Close the input stream
		in_<%=cid %>.close();
	}catch (Exception e_<%=cid %>){//Catch exception if any
		System.err.println(new Date()+"-ERROR: " + e_<%=cid %>.getMessage());
	}
	String xero_apiurl_<%=cid %> = <%=xero_apiurl %>;
	String str_xero_apiurl_filter_<%=cid %> = "";
	String strfilterCondition_<%=cid %> = "";
	String response_error_msg_<%=cid %> = "";
	String response_error_code_<%=cid %> = "";
<%
	for(int g = 0; g < size_filter_input_list; g++){ //for-size_filter_input
		Map<String, String> filter_input_listmap = filter_input_list.get(g);
		String inputColumn = filter_input_listmap.get("FILTER_COLUMN");
		String inputValue = filter_input_listmap.get("FILTER_VALUE");
		String parsedColumnName = "";
		if (inputColumn.indexOf("_") >= 0) { //inputColumn.indexOf("_")
				parsedColumnName = inputColumn.substring(inputColumn.indexOf("_")+1);
			}else{
				parsedColumnName = inputColumn;
			}//inputColumn.indexOf("_")
		if ( !("UpdatedDateUTC").equals(inputColumn) &&  !("ContactID").equals(inputColumn) ){ //UpdatedDateUTC ContactID
%>
		str_xero_apiurl_filter_<%=cid %> += "<%=parsedColumnName%>==";
		str_xero_apiurl_filter_<%=cid %> += "\""+<%=inputValue%>+"\"" + " AND ";
<%
		}//UpdatedDateUTC ContactID
		else {//UpdatedDateUTC ContactID
			if ( !("UpdatedDateUTC").equals(inputColumn) &&  ("ContactID").equals(inputColumn) ){ //ContactID").equals(inputColumn)
%>			
				str_xero_apiurl_filter_<%=cid %> += "<%=inputColumn%>=";
				str_xero_apiurl_filter_<%=cid %> += "Guid(\""+<%=inputValue%>+"\")" + " AND ";
<%			}//ContactID").equals(inputColumn)
		}//UpdatedDateUTC ContactID
	}//for-size_filter_input
%>
	//remove extra AND at the end if there
	if (!("").equals(str_xero_apiurl_filter_<%=cid %>) && str_xero_apiurl_filter_<%=cid %> != null) {
		str_xero_apiurl_filter_<%=cid %> = str_xero_apiurl_filter_<%=cid %>.substring(0, str_xero_apiurl_filter_<%=cid %>.lastIndexOf(" AND "));
	}
	org.apache.http.client.methods.HttpPost request_<%=cid %>;
	java.io.InputStream inputstream_<%=cid %>;
	org.w3c.dom.Document doc_<%=cid %>;
	String sResponseReceived_<%=cid %> = "";
	javax.xml.parsers.DocumentBuilder builder_<%=cid %>;
	org.w3c.dom.NodeList nodeList_schemacol_<%=cid %>;
	org.w3c.dom.NodeList nodeList_schemacol_child_<%=cid %>;
	org.w3c.dom.Node nNode_child_<%=cid %>;
	org.w3c.dom.Element eElement_child_<%=cid %>;
	org.w3c.dom.NodeList nodeList_child_<%=cid %>;
	String strAttributeValueIfFound_<%=cid %> = "";
	xero_apiurl_<%=cid %> += "/<%=modulename %>";
	if ( !<%=page_filter%>.equals("") && !<%=page_filter%>.equals("null")) {
		xero_apiurl_<%=cid %> += "?page="+<%=page_filter%>;
	}
	if ( !("").equals(str_xero_apiurl_filter_<%=cid %>) && str_xero_apiurl_filter_<%=cid %> != null	){
		xero_apiurl_<%=cid %> += "&where=" + java.net.URLEncoder.encode(str_xero_apiurl_filter_<%=cid %>);
	}
	xero_apiurl_<%=cid %> += "&order=" + java.net.URLEncoder.encode(<%=sort_by %> + " " + <%=sort_mode %>);
	xero_apiurl_<%=cid %> += "&includeArchived=" + <%=include_archive %>;
	
	if ( !<%=last_modified_date%>.equals("") && !<%=last_modified_date%>.equals("null")
		&& !<%=last_modified_date%>.equals("YYYY-MM-DDTHH24:MI:SS")
	) {
		xero_apiurl_<%=cid %> += "&If-Modified-Since=" + java.net.URLEncoder.encode(<%=last_modified_date%>);
	}
	//java.io.File file_<%=cid %> = new java.io.File("E:/arpit/xero.xml");
	System.out.println(new Date()+"-INFO-Submitting http request - "+xero_apiurl_<%=cid %>);
	net.oauth.OAuthServiceProvider serviceProvider_<%=cid %> = new net.oauth.OAuthServiceProvider(null,null,null);
	net.oauth.OAuthConsumer consumer_<%=cid %> = new net.oauth.OAuthConsumer(null, xero_CONSUMER_KEY_<%=cid %>, null, serviceProvider_<%=cid %>);
	consumer_<%=cid %>.setProperty(net.oauth.signature.RSA_SHA1.PRIVATE_KEY, Xero_CONSUMER_PRIVATE_KEY_<%=cid %>);
	consumer_<%=cid %>.setProperty(net.oauth.OAuth.OAUTH_SIGNATURE_METHOD, net.oauth.OAuth.RSA_SHA1);
	net.oauth.OAuthAccessor accessor_<%=cid %> = new net.oauth.OAuthAccessor(consumer_<%=cid %>);
	
	net.oauth.client.OAuthClient client_<%=cid %> = new net.oauth.client.OAuthClient(new net.oauth.client.httpclient4.HttpClient4());
    accessor_<%=cid %>.accessToken = xero_CONSUMER_KEY_<%=cid %>;
	net.oauth.OAuthMessage response_<%=cid %> = client_<%=cid %>.invoke(accessor_<%=cid %>,  net.oauth.OAuthMessage.GET, xero_apiurl_<%=cid %>, 
	java.util.Collections.<java.util.Map.Entry<?, ?>>emptySet());
	//System.out.println(response_<%=cid %>.readBodyAsString());  
  	inputstream_<%=cid %> = response_<%=cid %>.getBodyAsStream();;
	builder_<%=cid %> = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder();
 	doc_<%=cid %> = builder_<%=cid %>.parse(inputstream_<%=cid %>);
	//doc_<%=cid %> = builder_<%=cid %>.parse(file_<%=cid %>);
	if (doc_<%=cid %> != null) {//doc_if_null
		System.out.println(doc_<%=cid %>.toString() );
    	org.w3c.dom.NodeList nList_<%=cid %> = doc_<%=cid %>.getElementsByTagName("Response");
		org.w3c.dom.Node nNode_<%=cid %> = nList_<%=cid %>.item(0);
		org.w3c.dom.Element eElement_<%=cid %> = (org.w3c.dom.Element) nNode_<%=cid %>;
		nodeList_schemacol_<%=cid %> = eElement_<%=cid %>.getElementsByTagName("Status");
	if (nodeList_schemacol_<%=cid %>.getLength() > 0) {// sizecheck
		if (eElement_<%=cid %>.getElementsByTagName("Status").item(0).getTextContent() 
			!= null && eElement_<%=cid %>.getElementsByTagName("Status").item(0).getTextContent().length() != 0) {// nullcheck
			sResponseReceived_<%=cid %> = eElement_<%=cid %>.getElementsByTagName("Status").item(0).getTextContent();
		}// nullcheck
		else {
			sResponseReceived_<%=cid %> = "NOT OK";
		}
	}//sizecheck		
  
	    if (("ok").equals(sResponseReceived_<%=cid %>.toLowerCase())) {//responseok
			System.out.println(new Date()+"-INFO- Response is OK");
			nList_<%=cid %> = doc_<%=cid %>.getElementsByTagName("<%=modulename%>");
    	for (int i_<%=cid %> = 0; i_<%=cid %> < nList_<%=cid %>.getLength(); i_<%=cid %>++) {//parentfor
			nNode_<%=cid %> = nList_<%=cid %>.item(i_<%=cid %>);
 			if (nNode_<%=cid %>.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {//doc3
 				eElement_<%=cid %> = (org.w3c.dom.Element) nNode_<%=cid %>; 